import cv2
import numpy as np
import math

#sudo modprobe bcm2835-v4l2 if raspberry pi does not initiate the camera.

font = cv2.FONT_HERSHEY_COMPLEX

UserPoint = 0


DistanceMagnitude = 0
cap = cv2.VideoCapture(0)
radius = 0
areaArray = []
count = 1


#RGB Setup for Contours:
lower_blue = np.array([0,30,29])
upper_blue = np.array([179, 255,255 ])

#RGB Setup for Laser Spot:
lower_red = np.array([0, 0, 200])
upper_red = np.array([255, 255, 255])

CameraIsSet = 1

ShowScreen = 1




while cap.isOpened():

    _, frame = cap.read()
    NewBlank = np.zeros((512, 512, 3))
    blurred_frame = cv2.GaussianBlur(frame, (5, 5), 0)
    
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    hsv2 = cv2.cvtColor(blurred_frame, cv2.COLOR_BGR2HSV)
    mask = cv2.inRange(hsv, lower_blue, upper_blue)

    maskred = cv2.inRange(hsv2, lower_red, upper_red)

    bmask = cv2.GaussianBlur(maskred, (5, 5), 0)





    if CameraIsSet == 1:

        _, contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

        for i, c in enumerate(contours):
            area = cv2.contourArea(c)
            areaArray.append(area)

        # first sort the array by area
        sorteddata = sorted(zip(areaArray, contours), key=lambda x: x[0], reverse=True)
        # find the nth largest contour [n-1][1], in this case 2
        #secondlargestcontour = sorteddata[1][1]

        center = None

        if len(contours) > 0:

            c = max(contours, key=cv2.contourArea)
            ((x, y), radius) = cv2.minEnclosingCircle(c)
            print("Radius of Center:")
            print(radius)

            M = cv2.moments(c)

            M00 = M["m00"]

            if M00 != 0:
                center = int(M["m10"] / M00), int(M["m01"] / M00)
                centerofcirclex = int(M["m10"] / M00)
                print("Center of circle x:")
                print(centerofcirclex)

                centerofcircley = int(M["m01"] / M00)


            else:
                center = None

            for contour in contours:
                area = cv2.contourArea(contour)

                if area > 5000:
                   # cv2.drawContours(frame, contour, -1, (0, 255, 0), 3)

                    if centerofcirclex != None and centerofcircley != None:  # Center of circle ????????
                        cv2.circle(frame, center, 4, (0, 255, 255),2)


    _, contoursred, _ = cv2.findContours(maskred, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

    if len(contoursred) > 0:
        print("red contour found")

        moment = cv2.moments(bmask)
        m00 = moment['m00']
        centroid_x, centroid_y = None, None
        if m00 != 0:
            centroid_x = int(moment['m10'] / m00)
            centroid_y = int(moment['m01'] / m00)


        # Assume no centroid
        ctr = (-1, -1)

        for contourred in contoursred:
            areared = cv2.contourArea(contourred)


        if centroid_x != None and centroid_y != None:

            ctr = (centroid_x, centroid_y)

            # Put black circle in at centroid in image

            if areared > 0:
                cv2.drawContours(frame, contoursred, -1, (0, 255, 0), 3)
                img = cv2.circle(frame, ctr, 4, (255, 0, 0))


            Distancex = centroid_x - centerofcirclex
            Distancey = centroid_y - centerofcircley
            DistanceMagnitude = math.sqrt(Distancex * Distancex + Distancey * Distancey)

            print("Distance of Laser:")
            print(int(DistanceMagnitude))

    if DistanceMagnitude != None:
        if int(radius) > 0:

            Result = int(DistanceMagnitude) / int(radius)
            if Result != None:
                if 0.33 > Result > 0.05:
                    UserPoint = 10
                   #print(UserGets10)
                if 0.66 > Result > 0.33:
                    UserPoint = 8
                  #print(UserGets8)
                if 1 > Result > 0.66:
                    UserPoint = 6
                if 0.05 > Result:
                    UserPoint = 0
                if Result > 1:
                    UserPoint = 0   
                DistanceMagnitude = 0



    cv2.putText(NewBlank,str(UserPoint), (120, 400), font, 14, (0, 255, 0), 4, cv2.LINE_AA)
    if ShowScreen == 1:
        cv2.imshow('First Frame', frame)
    if ShowScreenr== 0:
        cv2.imshow('New Blank Frame', NewBlank)
  

    key = cv2.waitKey(1)

    if key == 32:
        CameraIsSet = 0
        print("Camera Is Configured")

    if key == 27:
        ShowScreen = 0


cap.release()
cv2.destroyAllWindows()
